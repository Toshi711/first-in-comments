import {Snake} from 'tgsnake'
import { formatId,log, readFile, fileExists, arrayRandom, askPath } from "./utils.js";
import handler from './messageChanger.js';
import config from './config.js'
import fs from 'fs/promises'
import input from 'input';
import chalk from 'chalk';
import path from 'path';
import printMessage from 'print-message'

printMessage([
    "–ü—Ä–∏–≤–µ—Ç ü§ô",
    "–ü–µ—Ä–≤–æ–Ω–∞—Ö –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–∞ (0.0.1)",
    "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ "+chalk.bold.underline('t.me/Caed3s')
], {
    border: true,
    color: 'green', // Text color
    borderColor: 'blue', // Border color is blue
    sideSymbol: '',
    marginTop: 3, // Margin before border is begins
    marginBottom: 3, // Margin after border is end
    paddingTop: 1, // Padding top after border begins
    paddingBottom: 1, // Padding bottom before border ends
});

if(!config || !config.appId || !config.appHash){
    log.error('App_id –∏–ª–∏ App_hash –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
    process.exit()
}

async function main() {
 
    let sessionPath
    if(await fileExists('./sessions')){
        const filesList = (await fs.readdir(path.join(path.resolve(),'sessions'))).filter((e) => path.extname(e).toLowerCase() === '.session');
        if(filesList.length > 0) {
            sessionPath = await input.select('üî∞–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Å—Å–∏—é', ['–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è', ...filesList])
            sessionPath = sessionPath == '–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è' ? null : (await fs.readFile('./sessions/'+sessionPath)).toString()
        }
    }

    const firstMessagePath = await askPath('üî∞–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ >');
    const secondMessagePath = await askPath('üî∞–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∑–∞–º–µ–Ω—è—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ >')
    const select = await input.select('üî∞–ö–∞–Ω–∞–ª—ã –¥–ª—è —Å–ø–∞–º–∞', ['–í—Å–µ –∫–∞–Ω–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ','.txt —Ñ–∞–π–ª —Å –∫–∞–Ω–∞–ª–∞–º–∏'])

    let chats
    if(select  == '.txt —Ñ–∞–π–ª —Å –∫–∞–Ω–∞–ª–∞–º–∏'){
        chats = await readFile(await askPath('üî∞–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞ —Å –≥—Ä—É–ø–ø–∞–º–∏ >'))
    }

    const storeSession = await input.select('üìÉC–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é?', ['–î–∞','–ù–µ—Ç'])

    const messages = await readFile(firstMessagePath)
    const secondMessages = await readFile(secondMessagePath)

    const bot = new Snake({
        session: sessionPath,
        apiHash: config.appHash,
        apiId: config.appId,
        deviceModel: 'Android',
        systemVersion: '4.16.30-vxCUSTOM',
        storeSession: false,
        connectionRetries: 5
    })

    bot.run()
    handler.init(bot).interval()
    
    bot.on("message", async (ctx)=>{
        if(!ctx.senderChat?.id || !ctx?.replies) return
        try{
            const senderId = formatId(ctx.senderChat.id)
            const chat = ctx.chat.id
            const type = ctx.senderChat.type
            const views = ctx.views

            if(type == 'channel' && (!chats || chats.includes(senderId)) && views < 15){
                const message = await ctx.telegram.sendMessage(chat,arrayRandom(messages), {replyToMsgId: ctx.id})
                log.success(`–û—Å—Ç–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ ${ctx.senderChat.title}`)
                handler.push(config.changeTime * 1000, {chat, id: message.message.id, text: arrayRandom(secondMessages)})
            }

        } catch{     
            log.error('–û—à–∏–±–∫–∞')
        }
    })
      
    bot.on("connected", async () =>{
        const savedSession = `sessions/${bot.aboutMe.firstName}_${bot.aboutMe.id}.session`
        if(!(await fileExists('./sessions'))) await fs.mkdir('sessions')
        if(storeSession == '–î–∞'){
            await fs.writeFile(savedSession, await bot.save())
            log.success('üì¶ C–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ '+savedSession)
        }
    })

}
 
main();